{"ast":null,"code":"import _defineProperty from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/melissa/datamatch/src/pages/PageSurvey.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  max-width: 700px;\\n\\n  .radio {\\n    border-radius: 50%;\\n    border: 2px solid #bd574e;\\n    width: 20px;\\n    height: 20px;\\n    background: #dd8078;\\n    margin-right: 11px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n  }\\n\\n  .radio-inside {\\n    border-radius: 50%;\\n    width: 12px;\\n    height: 12px;\\n    background: #4f1f1f;\\n  }\\n\\n  .answer {\\n    padding: 0px 10px;\\n    font-family: 'apercu-light';\\n    height: 40px;\\n    text-align: left;\\n    color: #222222;\\n    display: flex;\\n    align-items: center;\\n    cursor: pointer;\\n    &:hover {\\n      background: rgba(196, 196, 196, 0.1);\\n    }\\n  }\\n\\n  .answer-selected {\\n    background: #f3f2f2;\\n    &:hover {\\n      background: #f3f2f2;\\n    }\\n  }\\n\\n  .question {\\n    margin-bottom: 15px;\\n  }\\n\\n  .save-changes {\\n    align-items: center;\\n    background: #bd574e;\\n    color: #ffffff;\\n    font-family: Apercu;\\n    font-size: 18px;\\n    height: 38px;\\n    letter-spacing: 0.05em;\\n    margin-top: 20px;\\n    width: 170px;\\n  }\\n\\n  .checkmark {\\n    margin-right: 4px;\\n  }\\n\\n  .incomplete-message {\\n    color: red;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n/** @jsx jsx */\nimport { Component } from 'react';\nimport { jsx, css } from '@emotion/core';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { firebaseConnect } from 'react-redux-firebase';\nimport { Link } from 'react-router-dom';\nimport Header from 'components/Header';\nimport Loading from 'components/Loading';\nvar pageSurveyStyle = css(_templateObject());\n\nvar PageSurvey =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PageSurvey, _Component);\n\n  function PageSurvey() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PageSurvey);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PageSurvey)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderMessage = function (completed) {\n      var status = _this.props.status;\n\n      if (status === 'live-survey' || status === 'development') {\n        return completed ? jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, \"You've completed the survey! Make sure your\", ' ', jsx(Link, {\n          to: \"/app/profile\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, \"profile\"), \" is up to date as we calculate your matches by \", jsx(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, \"Friday, September 20\"), \"!\") : jsx(\"div\", {\n          className: \"incomplete-message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, \"Your survey is incomplete!\");\n      } else if (status === 'live-processing') {\n        return jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, \"The survey is closed! Check back soon for your matches!\");\n      } else if (status === 'live-matches') {\n        return jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, \"The survey is closed!\", ' ', jsx(Link, {\n          to: \"/app/results\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, \"Check out your matches!\"));\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(PageSurvey, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          responsesRequested = _this$props.responsesRequested,\n          status = _this$props.status,\n          survey = _this$props.survey,\n          surveyRequested = _this$props.surveyRequested,\n          updateResponse = _this$props.updateResponse;\n\n      if (!responsesRequested || !surveyRequested) {\n        return jsx(\"div\", {\n          style: {\n            height: 300\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, jsx(Loading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }));\n      }\n\n      if (!survey || !status.includes('live') && status !== 'development') {\n        return jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, \"Currently, there's no survey open. Check back soon!\");\n      }\n\n      var questions = survey || {};\n      var responses = this.props.responses || [];\n      var questionsKeys = Object.keys(questions).sort();\n      var completed = Object.keys(responses).length === Object.keys(questions).length;\n      return jsx(\"div\", {\n        css: pageSurveyStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, jsx(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"SURVEY\"), jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Don\\u2019t overthink these questions. They will reveal things that you don't even know about yourself.\"), jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), questionsKeys.map(function (questionId, questionIndex) {\n        var _questions$questionId = questions[questionId],\n            answers = _questions$questionId.answers,\n            text = _questions$questionId.text;\n        var answerKeys = Object.keys(answers || {}).sort();\n        return jsx(\"div\", {\n          className: \"question\",\n          key: questionId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }, jsx(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, questionIndex + 1 + '. ' + text), answerKeys.map(function (answerNum, answerIndex) {\n          var text = answers[answerNum];\n          var selected = responses[questionIndex] === answerIndex;\n          return jsx(\"div\", {\n            className: selected ? 'answer answer-selected' : 'answer',\n            key: answerIndex,\n            onClick: function onClick() {\n              if (!selected) {\n                updateResponse(questionIndex, answerIndex);\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 156\n            },\n            __self: this\n          }, jsx(\"div\", {\n            className: \"radio\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165\n            },\n            __self: this\n          }, selected && jsx(\"div\", {\n            className: \"radio-inside\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 166\n            },\n            __self: this\n          })), text);\n        }));\n      }), jsx(\"button\", {\n        className: \"save-changes\",\n        onClick: function onClick() {\n          alert('Changes saved!');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, jsx(\"i\", {\n        className: \"fas fa-check checkmark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }), \"Save Changes\"), jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }), jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }), jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, this.renderMessage(completed)));\n    }\n  }]);\n\n  return PageSurvey;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  var firebase = props.firebase,\n      status = props.status,\n      surveyKey = props.surveyKey,\n      uid = props.uid;\n  var _state$firebase = state.firebase,\n      data = _state$firebase.data,\n      requested = _state$firebase.requested;\n  return {\n    responses: data.responses,\n    responsesRequested: requested.responses,\n    survey: data.survey,\n    surveyRequested: requested.survey,\n    updateResponse: function updateResponse(questionId, responseId) {\n      if (status === 'live-survey' || status === 'development') {\n        firebase.update('/responses/' + surveyKey + '/' + uid, _defineProperty({}, questionId, responseId));\n      }\n    }\n  };\n};\n\nexport default compose(firebaseConnect(function (props) {\n  return [{\n    path: '/responses/' + props.surveyKey + '/' + props.uid,\n    storeAs: 'responses'\n  }, {\n    path: '/surveys/' + props.surveyKey,\n    storeAs: 'survey'\n  }];\n}), connect(mapStateToProps))(PageSurvey);","map":{"version":3,"sources":["/Users/melissa/datamatch/src/pages/PageSurvey.js"],"names":["Component","jsx","css","connect","compose","firebaseConnect","Link","Header","Loading","pageSurveyStyle","PageSurvey","renderMessage","completed","status","props","responsesRequested","survey","surveyRequested","updateResponse","height","includes","questions","responses","questionsKeys","Object","keys","sort","length","map","questionId","questionIndex","answers","text","answerKeys","answerNum","answerIndex","selected","alert","mapStateToProps","state","firebase","surveyKey","uid","data","requested","responseId","update","path","storeAs"],"mappings":"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","sourcesContent":["/** @jsx jsx */\n\nimport { Component } from 'react';\nimport { jsx, css } from '@emotion/core';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { firebaseConnect } from 'react-redux-firebase';\nimport { Link } from 'react-router-dom';\n\nimport Header from 'components/Header';\nimport Loading from 'components/Loading';\n\nconst pageSurveyStyle = css`\n  max-width: 700px;\n\n  .radio {\n    border-radius: 50%;\n    border: 2px solid #bd574e;\n    width: 20px;\n    height: 20px;\n    background: #dd8078;\n    margin-right: 11px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .radio-inside {\n    border-radius: 50%;\n    width: 12px;\n    height: 12px;\n    background: #4f1f1f;\n  }\n\n  .answer {\n    padding: 0px 10px;\n    font-family: 'apercu-light';\n    height: 40px;\n    text-align: left;\n    color: #222222;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    &:hover {\n      background: rgba(196, 196, 196, 0.1);\n    }\n  }\n\n  .answer-selected {\n    background: #f3f2f2;\n    &:hover {\n      background: #f3f2f2;\n    }\n  }\n\n  .question {\n    margin-bottom: 15px;\n  }\n\n  .save-changes {\n    align-items: center;\n    background: #bd574e;\n    color: #ffffff;\n    font-family: Apercu;\n    font-size: 18px;\n    height: 38px;\n    letter-spacing: 0.05em;\n    margin-top: 20px;\n    width: 170px;\n  }\n\n  .checkmark {\n    margin-right: 4px;\n  }\n\n  .incomplete-message {\n    color: red;\n  }\n`;\n\nclass PageSurvey extends Component {\n  renderMessage = completed => {\n    const { status } = this.props;\n    if (status === 'live-survey' || status === 'development') {\n      return completed ? (\n        <div>\n          You've completed the survey! Make sure your{' '}\n          <Link to=\"/app/profile\">profile</Link> is up to date as we calculate\n          your matches by <b>Friday, September 20</b>!\n        </div>\n      ) : (\n        <div className=\"incomplete-message\">Your survey is incomplete!</div>\n      );\n    } else if (status === 'live-processing') {\n      return <div>The survey is closed! Check back soon for your matches!</div>;\n    } else if (status === 'live-matches') {\n      return (\n        <div>\n          The survey is closed!{' '}\n          <Link to=\"/app/results\">Check out your matches!</Link>\n        </div>\n      );\n    }\n  };\n\n  render() {\n    const {\n      responsesRequested,\n      status,\n      survey,\n      surveyRequested,\n      updateResponse,\n    } = this.props;\n\n    if (!responsesRequested || !surveyRequested) {\n      return (\n        <div style={{ height: 300 }}>\n          <Loading />\n        </div>\n      );\n    }\n\n    if (!survey || (!status.includes('live') && status !== 'development')) {\n      return <div>Currently, there's no survey open. Check back soon!</div>;\n    }\n\n    const questions = survey || {};\n    let responses = this.props.responses || [];\n\n    const questionsKeys = Object.keys(questions).sort();\n\n    const completed =\n      Object.keys(responses).length === Object.keys(questions).length;\n\n    return (\n      <div css={pageSurveyStyle}>\n        <Header>SURVEY</Header>\n        <div>\n          Don’t overthink these questions. They will reveal things that you\n          don't even know about yourself.\n        </div>\n        <br />\n        {questionsKeys.map((questionId, questionIndex) => {\n          const { answers, text } = questions[questionId];\n\n          const answerKeys = Object.keys(answers || {}).sort();\n\n          return (\n            <div className=\"question\" key={questionId}>\n              <h5>{questionIndex + 1 + '. ' + text}</h5>\n              {answerKeys.map((answerNum, answerIndex) => {\n                const text = answers[answerNum];\n                const selected = responses[questionIndex] === answerIndex;\n\n                return (\n                  <div\n                    className={selected ? 'answer answer-selected' : 'answer'}\n                    key={answerIndex}\n                    onClick={() => {\n                      if (!selected) {\n                        updateResponse(questionIndex, answerIndex);\n                      }\n                    }}\n                  >\n                    <div className=\"radio\">\n                      {selected && <div className=\"radio-inside\" />}\n                    </div>\n                    {text}\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n        <button\n          className=\"save-changes\"\n          onClick={() => {\n            alert('Changes saved!');\n          }}\n        >\n          <i className=\"fas fa-check checkmark\"></i>Save Changes\n        </button>\n        <br />\n        <br />\n        <div>{this.renderMessage(completed)}</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, props) => {\n  const { firebase, status, surveyKey, uid } = props;\n  const { data, requested } = state.firebase;\n\n  return {\n    responses: data.responses,\n    responsesRequested: requested.responses,\n    survey: data.survey,\n    surveyRequested: requested.survey,\n    updateResponse: (questionId, responseId) => {\n      if (status === 'live-survey' || status === 'development') {\n        firebase.update('/responses/' + surveyKey + '/' + uid, {\n          [questionId]: responseId,\n        });\n      }\n    },\n  };\n};\n\nexport default compose(\n  firebaseConnect(props => [\n    {\n      path: '/responses/' + props.surveyKey + '/' + props.uid,\n      storeAs: 'responses',\n    },\n    {\n      path: '/surveys/' + props.surveyKey,\n      storeAs: 'survey',\n    },\n  ]),\n  connect(mapStateToProps),\n)(PageSurvey);\n"]},"metadata":{},"sourceType":"module"}