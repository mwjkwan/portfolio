{"ast":null,"code":"import _regeneratorRuntime from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/melissa/datamatch/src/pages/RestaurantPortal/ConfirmationCodes.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  font-weight: bold;\\n\\n  .conf-container {\\n    margin: 20px auto;\\n  }\\n\\n  p {\\n    margin-bottom: 1em;\\n  }\\n\\n  button {\\n    max-width: 300px;\\n    margin-right: 1em;\\n    margin-bottom: 1em;\\n    padding: 0.1em;\\n  }\\n\\n  input {\\n    max-width: 359px;\\n    height: 40px;\\n    border: none;\\n    background: #f4f2f2;\\n    font-family: 'Apercu-light';\\n    display: flex;\\n    align-items: center;\\n    letter-spacing: 0.05em;\\n\\n    color: #545353;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n/** @jsx jsx **/\nimport { Component } from 'react';\nimport { jsx, css } from '@emotion/core';\nimport Header from 'components/Header';\nimport Loading from 'components/Loading';\nvar checkInStyle = css(_templateObject());\n\nvar ConfirmationCodes =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ConfirmationCodes, _Component);\n\n  function ConfirmationCodes(props) {\n    var _this;\n\n    _classCallCheck(this, ConfirmationCodes);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConfirmationCodes).call(this, props));\n    _this.state = {\n      codes: [],\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(ConfirmationCodes, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var today, month, day, dates, dateId, codeSnapshot, codes;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              today = new Date(new Date().toLocaleString('en-US', {\n                timeZone: 'America/New_York'\n              }));\n              month = today.getMonth() + 1;\n              day = today.getDate();\n              dates = this.props.restaurantInformation.dates || {};\n              dateId = dates[\"\".concat(month, \"-\").concat(day)];\n\n              if (dateId) {\n                _context.next = 8;\n                break;\n              }\n\n              this.setState({\n                codes: [],\n                day: day,\n                loading: false,\n                month: month\n              });\n              return _context.abrupt(\"return\");\n\n            case 8:\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(this.props.firebase.ref('/codes').orderByChild('date').equalTo(dateId).once('value'));\n\n            case 10:\n              codeSnapshot = _context.sent;\n              codes = codeSnapshot.val() || [];\n              this.setState({\n                codes: codes,\n                day: day,\n                loading: false,\n                month: month\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          loading = _this$state.loading,\n          codes = _this$state.codes,\n          day = _this$state.day,\n          month = _this$state.month;\n      var _this$props$restauran = this.props.restaurantInformation.name,\n          name = _this$props$restauran === void 0 ? '' : _this$props$restauran;\n\n      if (loading) {\n        return jsx(Loading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        });\n      }\n\n      var displayDate = \"\".concat(month, \"/\").concat(day);\n      return jsx(\"div\", {\n        className: \"RestaurantHome\",\n        css: checkInStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, jsx(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, displayDate, \" \", name.toUpperCase(), \" CONFIRMATION CODES\"), jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, jsx(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Confirmation Codes\"), jsx(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, jsx(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, Object.keys(codes).map(function (code) {\n        return jsx(\"tr\", {\n          key: code,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, jsx(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, code));\n      }))), codes.length === 0 && jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"No codes found for today, \", displayDate, \"!\")));\n    }\n  }]);\n\n  return ConfirmationCodes;\n}(Component);\n\nexport { ConfirmationCodes as default };","map":{"version":3,"sources":["/Users/melissa/datamatch/src/pages/RestaurantPortal/ConfirmationCodes.js"],"names":["Component","jsx","css","Header","Loading","checkInStyle","ConfirmationCodes","props","state","codes","loading","today","Date","toLocaleString","timeZone","month","getMonth","day","getDate","dates","restaurantInformation","dateId","setState","firebase","ref","orderByChild","equalTo","once","codeSnapshot","val","name","displayDate","toUpperCase","Object","keys","map","code","length"],"mappings":"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","sourcesContent":["/** @jsx jsx **/\n\nimport { Component } from 'react';\nimport { jsx, css } from '@emotion/core';\n\nimport Header from 'components/Header';\nimport Loading from 'components/Loading';\n\nconst checkInStyle = css`\n  font-weight: bold;\n\n  .conf-container {\n    margin: 20px auto;\n  }\n\n  p {\n    margin-bottom: 1em;\n  }\n\n  button {\n    max-width: 300px;\n    margin-right: 1em;\n    margin-bottom: 1em;\n    padding: 0.1em;\n  }\n\n  input {\n    max-width: 359px;\n    height: 40px;\n    border: none;\n    background: #f4f2f2;\n    font-family: 'Apercu-light';\n    display: flex;\n    align-items: center;\n    letter-spacing: 0.05em;\n\n    color: #545353;\n  }\n`;\n\nexport default class ConfirmationCodes extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      codes: [],\n      loading: true,\n    };\n  }\n\n  async componentDidMount() {\n    const today = new Date(\n      new Date().toLocaleString('en-US', {\n        timeZone: 'America/New_York',\n      }),\n    );\n\n    const month = today.getMonth() + 1;\n    const day = today.getDate();\n    const dates = this.props.restaurantInformation.dates || {};\n    const dateId = dates[`${month}-${day}`];\n\n    if (!dateId) {\n      this.setState({ codes: [], day, loading: false, month });\n      return;\n    }\n\n    const codeSnapshot = await this.props.firebase\n      .ref('/codes')\n      .orderByChild('date')\n      .equalTo(dateId)\n      .once('value');\n    const codes = codeSnapshot.val() || [];\n\n    this.setState({ codes, day, loading: false, month });\n  }\n\n  render() {\n    const { loading, codes, day, month } = this.state;\n    const { name = '' } = this.props.restaurantInformation;\n\n    if (loading) {\n      return <Loading />;\n    }\n\n    const displayDate = `${month}/${day}`;\n\n    return (\n      <div className=\"RestaurantHome\" css={checkInStyle}>\n        <Header>\n          {displayDate} {name.toUpperCase()} CONFIRMATION CODES\n        </Header>\n        <div>\n          <b>Confirmation Codes</b>\n          <table>\n            <tbody>\n              {Object.keys(codes).map(code => (\n                <tr key={code}>\n                  <td>{code}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          {codes.length === 0 && (\n            <div>No codes found for today, {displayDate}!</div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}