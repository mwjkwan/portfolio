{"ast":null,"code":"import _classCallCheck from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/melissa/datamatch/src/pages/PageResults/routes/Dates.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  .date {\\n    text-align: left;\\n    width: 155px;\\n    height: 32px;\\n    margin-bottom: 12px;\\n    margin-right: 12px;\\n    border: 2px solid #4f5262;\\n    font-family: Apercu;\\n    font-size: 14px;\\n    line-height: 20px;\\n    letter-spacing: 0.145em;\\n    color: #4f5262;\\n  }\\n\\n  .blue-button {\\n    background: #dedef0;\\n  }\\n\\n  .you-button {\\n    background: #e9c8c5;\\n  }\\n\\n  .both-button {\\n    background: #ffad87;\\n  }\\n\\n  .partner-button {\\n    background: #d3908a;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n/** @jsx jsx **/\nimport { Component } from 'react';\nimport { jsx, css } from '@emotion/core';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { firebaseConnect } from 'react-redux-firebase';\nimport { isLoaded } from 'react-redux-firebase';\nimport Loading from 'components/Loading';\nvar datesStyle = css(_templateObject());\n\nvar Dates =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dates, _Component);\n\n  function Dates(props) {\n    var _this;\n\n    _classCallCheck(this, Dates);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dates).call(this, props));\n    _this.state = {\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(Dates, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (isLoaded(this.props.dates) && this.state.loading) {\n        this.setState({\n          loading: false\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading) {\n        return jsx(\"div\", {\n          style: {\n            height: 200\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, jsx(Loading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }));\n      }\n\n      var _this$props = this.props,\n          dates = _this$props.dates,\n          match = _this$props.match,\n          otherUid = _this$props.otherUid,\n          uid = _this$props.uid;\n      var availability = match.availability;\n      return jsx(\"div\", {\n        css: datesStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, Object.keys(dates).map(function (dateId) {\n        var date = dates[dateId];\n\n        if (!date || date.datesAvailable <= 0) {\n          return jsx(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          });\n        } // managing the color of the buttons\n\n\n        var btnClass = 'blue-button';\n\n        if (availability) {\n          var available = availability[dateId];\n\n          if (available) {\n            if (available[otherUid] && available[uid]) {\n              btnClass = 'both-button';\n            } else if (!available[otherUid] && available[uid]) {\n              btnClass = 'you-button';\n            } else if (available[otherUid] && !available[uid]) {\n              btnClass = 'partner-button';\n            }\n          }\n        } // The next part toggles between the true and false values stored in the state\n\n\n        return jsx(\"button\", {\n          className: 'date ' + btnClass,\n          key: dateId,\n          onClick: function onClick() {\n            /* This should change the database directly and not set state. */\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, date.place.toUpperCase(), \" \", date.day);\n      }));\n    }\n  }]);\n\n  return Dates;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state, _props) {\n  return {\n    dates: state.firebase.data.dates\n  };\n};\n\nexport default compose(firebaseConnect(function () {\n  return [{\n    path: '/dates',\n    storeAs: 'dates'\n  }];\n}), connect(mapStateToProps))(Dates);","map":{"version":3,"sources":["/Users/melissa/datamatch/src/pages/PageResults/routes/Dates.js"],"names":["Component","jsx","css","connect","compose","firebaseConnect","isLoaded","Loading","datesStyle","Dates","props","state","loading","dates","setState","height","match","otherUid","uid","availability","Object","keys","map","dateId","date","datesAvailable","btnClass","available","place","toUpperCase","day","mapStateToProps","_props","firebase","data","path","storeAs"],"mappings":"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","sourcesContent":["/** @jsx jsx **/\n\nimport { Component } from 'react';\nimport { jsx, css } from '@emotion/core';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { firebaseConnect } from 'react-redux-firebase';\nimport { isLoaded } from 'react-redux-firebase';\n\nimport Loading from 'components/Loading';\n\nconst datesStyle = css`\n  .date {\n    text-align: left;\n    width: 155px;\n    height: 32px;\n    margin-bottom: 12px;\n    margin-right: 12px;\n    border: 2px solid #4f5262;\n    font-family: Apercu;\n    font-size: 14px;\n    line-height: 20px;\n    letter-spacing: 0.145em;\n    color: #4f5262;\n  }\n\n  .blue-button {\n    background: #dedef0;\n  }\n\n  .you-button {\n    background: #e9c8c5;\n  }\n\n  .both-button {\n    background: #ffad87;\n  }\n\n  .partner-button {\n    background: #d3908a;\n  }\n`;\n\nclass Dates extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { loading: true };\n  }\n\n  componentDidUpdate() {\n    if (isLoaded(this.props.dates) && this.state.loading) {\n      this.setState({ loading: false });\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div style={{ height: 200 }}>\n          <Loading />\n        </div>\n      );\n    }\n\n    const { dates, match, otherUid, uid } = this.props;\n    const { availability } = match;\n\n    return (\n      <div css={datesStyle}>\n        {/* Iterating over all the dates and rendering the buttons dynamically */}\n        {Object.keys(dates).map(dateId => {\n          const date = dates[dateId];\n\n          if (!date || date.datesAvailable <= 0) {\n            return <div />;\n          }\n\n          // managing the color of the buttons\n          let btnClass = 'blue-button';\n          if (availability) {\n            const available = availability[dateId];\n            if (available) {\n              if (available[otherUid] && available[uid]) {\n                btnClass = 'both-button';\n              } else if (!available[otherUid] && available[uid]) {\n                btnClass = 'you-button';\n              } else if (available[otherUid] && !available[uid]) {\n                btnClass = 'partner-button';\n              }\n            }\n          }\n\n          // The next part toggles between the true and false values stored in the state\n          return (\n            <button\n              className={'date ' + btnClass}\n              key={dateId}\n              onClick={() => {\n                /* This should change the database directly and not set state. */\n              }}\n            >\n              {date.place.toUpperCase()} {date.day}\n            </button>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, _props) => {\n  return {\n    dates: state.firebase.data.dates,\n  };\n};\n\nexport default compose(\n  firebaseConnect(() => [\n    {\n      path: '/dates',\n      storeAs: 'dates',\n    },\n  ]),\n  connect(mapStateToProps),\n)(Dates);\n"]},"metadata":{},"sourceType":"module"}