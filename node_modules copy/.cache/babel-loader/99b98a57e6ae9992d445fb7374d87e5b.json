{"ast":null,"code":"import _classCallCheck from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/melissa/datamatch/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/melissa/datamatch/src/pages/PageGender.js\";\nimport React from 'react';\nimport { Component } from 'react';\n\nvar PageGender =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PageGender, _Component);\n\n  function PageGender() {\n    _classCallCheck(this, PageGender);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PageGender).apply(this, arguments));\n  }\n\n  _createClass(PageGender, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 7\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, \"Gender Policy 2019\"), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, \"Key Goals:\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, \"Treat everyone equally by building in a third gender option just like the previous two. Make everyone excited for Datamatch by creating an awesome product.\"), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, \"Self-description:\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, \"Users will be required to select one of three categories for which gender they want the algorithm to treat them as. These will be either \\\"Man\\\", \\\"Woman\\\", or \\\"Non-binary\\\". In addition to selecting one of these three categories, users will be able to add a limited amount of text (100 characters) to describe their gender. This additional description will be optional, and available to people who identify with any of the three larger gender categories. In addition to gender influencing matching, gender identity will optionally appear on a user\\u2019s profile page according to the gender category they chose and their self-description.\"), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"Matching:\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"Users will be matched based on how they self identify from among the three categories above. Users will select gender preferences through selecting any one, two or three of the three gender categories they prefer to be match eligible with. This will be implemented with checkboxes. Users will be matched with people from among the genders that they indicated being interested in who also expressed interest in people of that user\\u2019s gender.\"), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Language:\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Datamatch will no longer use gender to summarize a match, for example by displaying something like \\u201CYour match Russell is a junior male living in Leverett\\\". Instead, we will just drop gender from this description, \\u201CYour match Russell is a junior living in Leverett\\\". Datamatch will not use gender within our officially crafted publicity materials, unless it includes references to all three gender subcategories equally. This means we will refrain from poster text such as \\\"Hey guys and gals check out this cute meet\\\".\"), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Visualizations:\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"In creating cool visualizations, all collected gender information will be included. This means visualizations summarizing past data will only have two gender options, though visualizations describing data collected on or after 2018 will have three options. In order to demonstrate we still care about this issue, any visualization with incomplete gender categories will include a footnote pointing out our past error. Footnote text: \\\"Data for this visualization came from a time when Datamatch regrettably only included two gender options.\\\"\"), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Periphery Implications:\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Datamatch shall follow these guidelines at other schools it operates at.\")));\n    }\n  }]);\n\n  return PageGender;\n}(Component);\n\nexport { PageGender as default };","map":{"version":3,"sources":["/Users/melissa/datamatch/src/pages/PageGender.js"],"names":["React","Component","PageGender"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;;IAEqBC,U;;;;;;;;;;;;;6BACV;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uKAHF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6oBATF,EAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBArBF,EAsBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wcAtBF,EA+BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA/BF,EAgCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,giBAhCF,EA0CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BA1CF,EA2CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0iBA3CF,EAsDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAtDF,EAuDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oFAvDF,CADF,CADF;AAgED;;;;EAlEqCD,S;;SAAnBC,U","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\n\nexport default class PageGender extends Component {\n  render() {\n    return (\n      <div>\n        <div>\n          <h3>Gender Policy 2019</h3>\n          <h4>Key Goals:</h4>\n          <p>\n            Treat everyone equally by building in a third gender option just\n            like the previous two. Make everyone excited for Datamatch by\n            creating an awesome product.\n          </p>\n          <h4>Self-description:</h4>\n          <p>\n            Users will be required to select one of three categories for which\n            gender they want the algorithm to treat them as. These will be\n            either \"Man\", \"Woman\", or \"Non-binary\". In addition to selecting one\n            of these three categories, users will be able to add a limited\n            amount of text (100 characters) to describe their gender. This\n            additional description will be optional, and available to people who\n            identify with any of the three larger gender categories. In addition\n            to gender influencing matching, gender identity will optionally\n            appear on a user’s profile page according to the gender category\n            they chose and their self-description.\n          </p>\n          <h4>Matching:</h4>\n          <p>\n            Users will be matched based on how they self identify from among the\n            three categories above. Users will select gender preferences through\n            selecting any one, two or three of the three gender categories they\n            prefer to be match eligible with. This will be implemented with\n            checkboxes. Users will be matched with people from among the genders\n            that they indicated being interested in who also expressed interest\n            in people of that user’s gender.\n          </p>\n          <h4>Language:</h4>\n          <p>\n            Datamatch will no longer use gender to summarize a match, for\n            example by displaying something like “Your match Russell is a junior\n            male living in Leverett\". Instead, we will just drop gender from\n            this description, “Your match Russell is a junior living in\n            Leverett\". Datamatch will not use gender within our officially\n            crafted publicity materials, unless it includes references to all\n            three gender subcategories equally. This means we will refrain from\n            poster text such as \"Hey guys and gals check out this cute meet\".\n          </p>\n          <h4>Visualizations:</h4>\n          <p>\n            In creating cool visualizations, all collected gender information\n            will be included. This means visualizations summarizing past data\n            will only have two gender options, though visualizations describing\n            data collected on or after 2018 will have three options. In order to\n            demonstrate we still care about this issue, any visualization with\n            incomplete gender categories will include a footnote pointing out\n            our past error. Footnote text: \"Data for this visualization came\n            from a time when Datamatch regrettably only included two gender\n            options.\"\n          </p>\n          <h4>Periphery Implications:</h4>\n          <p>\n            Datamatch shall follow these guidelines at other schools it operates\n            at.\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}